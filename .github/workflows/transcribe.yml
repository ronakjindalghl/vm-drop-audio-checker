name: Audio Transcription and Compliance Check

on:
  issues:
    types: [opened]

jobs:
  transcribe:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(github.event.issue.labels.*.name, 'audio-processing')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: pip install openai requests
        
    - name: Extract audio data from issue
      run: |
        python3 -c "
        import re, os, time
        
        issue_body = '''${{ github.event.issue.body }}'''
        match = re.search(r'AUDIO_DATA_START\n(.*?)\nAUDIO_DATA_END', issue_body, re.DOTALL)
        if not match:
            print('No audio data found in issue')
            exit(1)
        
        audio_content = match.group(1).strip()
        title = '''${{ github.event.issue.title }}'''
        file_name_match = re.search(r'Audio Processing: (.*?) -', title)
        file_name = file_name_match.group(1) if file_name_match else 'unknown.mp3'
        timestamp_match = re.search(r'- (\d+)', title)
        timestamp = timestamp_match.group(1) if timestamp_match else str(int(time.time() * 1000))
        
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write(f'AUDIO_CONTENT={audio_content}\n')
            f.write(f'FILE_NAME={file_name}\n')
            f.write(f'TIMESTAMP={timestamp}\n')
            f.write(f'ISSUE_NUMBER=${{ github.event.issue.number }}\n')
        
        print(f'Extracted audio data for file: {file_name}')
        "
        
    - name: Process audio file
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python3 -c "
        import json, base64, os, re, time, sys
        from openai import OpenAI
        
        def load_blocked_keywords():
            return '''Internal Revenue Service
        Social Security number suspended
        law enforcement action
        asset seizure
        federal warrant
        Publishers Clearing House
        mega jackpot
        sweepstakes
        claim your winnings
        interest rate reduction
        student loan forgiveness center
        settle all old tax debt
        100 % debt elimination
        vehicle service contract
        extended auto warranty
        Apple Support Advisor
        suspicious charge on your Amazon account
        your IP address has been compromised
        Google Play gift card
        scratch off the code
        pay with iTunes cards
        Press 1 to connect
        final courtesy call
        do not hang up
        rebate check
        verification code over the phone
        Department of Education settlement
        Sweepstake
        Jackpot
        Million
        Lottery
        Bank
        Loan
        Package
        Giveaway
        Game
        Gaming
        Unclaimed
        Paypal
        Affirm
        Coinbase
        Binance
        Bank of America
        Chase
        Amazon
        Mercedes Benz
        Cybertrunk
        MegaMillions
        Powerball
        PCH
        Reader's Digest
        Readers Digest
        Quickbooks
        Claims code
        Claims ID
        Claim number
        Claims agent
        Claims office
        Claim reward
        Unclaimed reward
        Prize patrol
        Patrol team
        Fraud Department
        Security Department
        Claims Department
        Lottery Department
        Unclaimed Department
        Gaming Commission
        Multistate Lottery Association
        Global International Lottery
        Global Lottery Sweepstakes
        Government Bureau
        Federal Reserve Bank
        Mega Millions
        Exclusive claims
        Award winner
        Cash
        Prizes
        Claim number
        Award presentation
        give away
        IRS
        Games Commission'''.strip().split('\n')
        
        def check_violations(transcription, keywords):
            violations = []
            for keyword in keywords:
                if keyword.strip():
                    pattern = re.compile(re.escape(keyword.strip()), re.IGNORECASE)
                    for match in pattern.finditer(transcription):
                        start_pos = max(0, match.start() - 50)
                        end_pos = min(len(transcription), match.end() + 50)
                        violations.append({
                            'keyword': keyword.strip(),
                            'matched_text': match.group(),
                            'context': transcription[start_pos:end_pos],
                            'position': match.start()
                        })
            return violations
        
        try:
            api_key = os.environ['OPENAI_API_KEY']
            if not api_key or api_key == 'PLACEHOLDER_REPLACE_WITH_ACTUAL_KEY':
                raise Exception('OpenAI API key not configured. Please add your API key to repository secrets.')
            
            audio_content = os.environ['AUDIO_CONTENT']
            file_name = os.environ['FILE_NAME']
            timestamp = os.environ['TIMESTAMP']
            
            print(f'Processing file: {file_name}')
            client = OpenAI(api_key=api_key)
            audio_data = base64.b64decode(audio_content)
            
            with open('temp_audio.mp3', 'wb') as f:
                f.write(audio_data)
            
            with open('temp_audio.mp3', 'rb') as audio_file:
                transcript = client.audio.transcriptions.create(
                    model='whisper-1',
                    file=audio_file,
                    response_format='text'
                )
            
            os.remove('temp_audio.mp3')
            print(f'Transcription completed: {len(transcript)} characters')
            
            keywords = load_blocked_keywords()
            violations = check_violations(transcript, keywords)
            print(f'Found {len(violations)} violations')
            
            results = {
                'file_name': file_name,
                'timestamp': timestamp,
                'transcription': transcript,
                'violations': violations,
                'violations_count': len(violations),
                'processed_at': time.time()
            }
            
            with open(os.environ['GITHUB_ENV'], 'a') as f:
                f.write(f'PROCESSING_RESULTS<<EOF\n{json.dumps(results)}\nEOF\n')
            
        except Exception as e:
            print(f'Error: {str(e)}')
            error_results = {
                'error': True,
                'message': str(e),
                'timestamp': timestamp,
                'processed_at': time.time()
            }
            with open(os.environ['GITHUB_ENV'], 'a') as f:
                f.write(f'PROCESSING_RESULTS<<EOF\n{json.dumps(error_results)}\nEOF\n')
        "
        
    - name: Post results as comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python3 -c "
        import json, os, requests
        
        results = json.loads(os.environ['PROCESSING_RESULTS'])
        issue_number = os.environ['ISSUE_NUMBER']
        
        if results.get('error'):
            comment_body = f'''## ❌ Processing Failed
        
        **Error:** {results['message']}
        
        Please check your file and try again.'''
        else:
            violations_text = ''
            if results['violations']:
                violations_text = '### ❌ Violations Found:\n\n'
                for i, v in enumerate(results['violations'], 1):
                    violations_text += f'{i}. **{v[\"keyword\"]}** found as \"{v[\"matched_text\"]}\"\n'
                    violations_text += f'   Context: ...{v[\"context\"]}...\n\n'
            else:
                violations_text = '### ✅ No Violations Found\n\nThis audio file does not contain any blocked keywords.\n\n'
        
            comment_body = f'''## 🎤 Audio Processing Complete
        
        **File:** {results['file_name']}
        **Violations:** {results['violations_count']}
        
        {violations_text}
        
        ### 📝 Full Transcription:
        ```
        {results['transcription']}
        ```
        
        ---
        
        TRANSCRIPTION_RESULTS_START
        {json.dumps(results)}
        TRANSCRIPTION_RESULTS_END'''
        
        headers = {
            'Authorization': f'token {os.environ[\"GITHUB_TOKEN\"]}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        response = requests.post(
            f'https://api.github.com/repos/ronakjindalghl/vm-drop-audio-checker/issues/{issue_number}/comments',
            headers=headers,
            json={'body': comment_body}
        )
        
        if response.status_code == 201:
            print('Results posted successfully')
            
            # Close the issue
            requests.patch(
                f'https://api.github.com/repos/ronakjindalghl/vm-drop-audio-checker/issues/{issue_number}',
                headers=headers,
                json={'state': 'closed'}
            )
        else:
            print(f'Failed to post results: {response.status_code}')
        "
